import jsPDF from 'jspdf';
import { Trip, Waypoint } from '@/hooks/useTrips';

export const exportTripAsPDF = async (trip: Trip) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 20;
  let yPosition = margin;

  // Header
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text(trip.title, margin, yPosition);
  yPosition += 15;

  // Trip details
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  
  const details = [
    `From: ${trip.start_location}`,
    `To: ${trip.end_location}`,
    `Duration: ${trip.start_date} to ${trip.end_date}`,
    `Travelers: ${trip.travelers}`,
    `Budget: ₹${trip.budget?.toLocaleString()}`,
    `Vehicle: ${trip.vehicle_type}`,
    `Fuel Type: ${trip.fuel_type}`,
    `Distance: ${trip.total_distance} km`,
    `Estimated Fuel Cost: ₹${trip.estimated_fuel_cost?.toLocaleString()}`
  ];

  details.forEach(detail => {
    pdf.text(detail, margin, yPosition);
    yPosition += 8;
  });

  yPosition += 10;

  // Waypoints section
  if (trip.waypoints && trip.waypoints.length > 0) {
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Itinerary', margin, yPosition);
    yPosition += 15;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');

    trip.waypoints
      .sort((a, b) => a.stop_order - b.stop_order)
      .forEach((waypoint, index) => {
        const stopText = `${index + 1}. ${waypoint.name}`;
        pdf.text(stopText, margin, yPosition);
        yPosition += 8;

        if (waypoint.description) {
          pdf.setFontSize(10);
          pdf.text(`   ${waypoint.description}`, margin, yPosition);
          yPosition += 6;
          pdf.setFontSize(12);
        }

        if (waypoint.estimated_time) {
          pdf.text(`   Time: ${waypoint.estimated_time}`, margin, yPosition);
          yPosition += 6;
        }

        if (waypoint.estimated_cost) {
          pdf.text(`   Cost: ${waypoint.estimated_cost}`, margin, yPosition);
          yPosition += 6;
        }

        yPosition += 5;

        // Check if we need a new page
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = margin;
        }
      });
  }

  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.text(
      `Generated by TripWeave - Page ${i} of ${pageCount}`,
      pageWidth - margin - 60,
      pdf.internal.pageSize.getHeight() - 10
    );
  }

  // Save the PDF
  pdf.save(`${trip.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_itinerary.pdf`);
};

export const exportTripAsJSON = (trip: Trip) => {
  const exportData = {
    ...trip,
    exported_at: new Date().toISOString(),
    version: '1.0'
  };

  const dataStr = JSON.stringify(exportData, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(dataBlob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `${trip.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_trip.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

export const shareTripLink = async (tripId: string) => {
  const shareUrl = `${window.location.origin}/trip/${tripId}`;
  
  if (navigator.share) {
    try {
      await navigator.share({
        title: 'Check out my trip plan!',
        url: shareUrl
      });
      return true;
    } catch (error) {
      console.log('Error sharing:', error);
    }
  }
  
  // Fallback to clipboard
  try {
    await navigator.clipboard.writeText(shareUrl);
    return true;
  } catch (error) {
    console.error('Error copying to clipboard:', error);
    return false;
  }
};